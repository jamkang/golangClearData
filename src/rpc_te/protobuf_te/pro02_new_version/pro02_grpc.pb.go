// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: pro02.proto

package protobuf_te

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProServiceClient is the client API for ProService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProServiceClient interface {
	GetProdStock(ctx context.Context, in *ProdRequest, opts ...grpc.CallOption) (*ProdResponse, error)
}

type proServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProServiceClient(cc grpc.ClientConnInterface) ProServiceClient {
	return &proServiceClient{cc}
}

func (c *proServiceClient) GetProdStock(ctx context.Context, in *ProdRequest, opts ...grpc.CallOption) (*ProdResponse, error) {
	out := new(ProdResponse)
	err := c.cc.Invoke(ctx, "/protobuf_te.ProService/GetProdStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProServiceServer is the server API for ProService service.
// All implementations must embed UnimplementedProServiceServer
// for forward compatibility
type ProServiceServer interface {
	GetProdStock(context.Context, *ProdRequest) (*ProdResponse, error)
	mustEmbedUnimplementedProServiceServer()
}

// UnimplementedProServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProServiceServer struct {
}

func (UnimplementedProServiceServer) GetProdStock(context.Context, *ProdRequest) (*ProdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProdStock not implemented")
}
func (UnimplementedProServiceServer) mustEmbedUnimplementedProServiceServer() {}

// UnsafeProServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProServiceServer will
// result in compilation errors.
type UnsafeProServiceServer interface {
	mustEmbedUnimplementedProServiceServer()
}

func RegisterProServiceServer(s grpc.ServiceRegistrar, srv ProServiceServer) {
	s.RegisterService(&ProService_ServiceDesc, srv)
}

func _ProService_GetProdStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProServiceServer).GetProdStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf_te.ProService/GetProdStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProServiceServer).GetProdStock(ctx, req.(*ProdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProService_ServiceDesc is the grpc.ServiceDesc for ProService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf_te.ProService",
	HandlerType: (*ProServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProdStock",
			Handler:    _ProService_GetProdStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pro02.proto",
}
